import{_ as e,c as o,o as t,a2 as i}from"./chunks/framework.B8ScJZFy.js";const m=JSON.parse('{"title":"Principles of Application Layer Protocols","description":"","frontmatter":{},"headers":[],"relativePath":"Application Layer/Principles of Application Layer Protocols.md","filePath":"Application Layer/Principles of Application Layer Protocols.md","lastUpdated":1714915141000}'),r={name:"Application Layer/Principles of Application Layer Protocols.md"},l=i('<h1 id="principles-of-application-layer-protocols" tabindex="-1">Principles of Application Layer Protocols <a class="header-anchor" href="#principles-of-application-layer-protocols" aria-label="Permalink to &quot;Principles of Application Layer Protocols&quot;">​</a></h1><h2 id="network-application-architecture" tabindex="-1">Network Application Architecture <a class="header-anchor" href="#network-application-architecture" aria-label="Permalink to &quot;Network Application Architecture&quot;">​</a></h2><ul><li>Application <strong>communicating,distribute processes</strong><ul><li>hosts in <strong>&quot;user spece&quot;</strong></li><li>exchange messages to implement application</li></ul></li><li>Application-layer protocols <ul><li>define messages exchanged by apps and actions taken</li><li><strong>user services provided by lower layer protocols</strong></li></ul></li></ul><h2 id="processes-communicating" tabindex="-1">Processes Communicating <a class="header-anchor" href="#processes-communicating" aria-label="Permalink to &quot;Processes Communicating&quot;">​</a></h2><ul><li>Client <ul><li>initiate contact with server (first)</li><li>typically requests service from server</li></ul></li><li>Server <ul><li>provides requests service to client</li></ul></li></ul><h2 id="application-layer-protocols" tabindex="-1">Application-layer protocols <a class="header-anchor" href="#application-layer-protocols" aria-label="Permalink to &quot;Application-layer protocols&quot;">​</a></h2><ul><li><strong>defines interface between application and transport layer</strong></li><li><strong>socket</strong> -&gt; Internet API <ul><li>two processes commiunicate by sending data to socket and reading data from socket</li></ul></li></ul><h2 id="services-provided-by-internet-transport-protocols" tabindex="-1">Services provided by Internet transport protocols <a class="header-anchor" href="#services-provided-by-internet-transport-protocols" aria-label="Permalink to &quot;Services provided by Internet transport protocols&quot;">​</a></h2><ul><li><p><strong>TCP</strong></p><ul><li><strong>connection-oriented</strong>: setup required between client and server</li><li><strong>reliable transport</strong>: between sending and receiving process</li><li><strong>flow control</strong>: sender won&#39;t overwhelm receiver</li><li><strong>congestion control</strong>: throttle sender when network overloaded</li><li><strong>Not provided</strong>: <blockquote><p>timing<br> minimum bandwidth guarantees</p></blockquote></li></ul></li><li><p><strong>UDP</strong></p><ul><li><strong>lightweight</strong>: unreliable data transfer between sending and receiving process</li><li><strong>Not provided</strong>: <blockquote><p>connection setup<br> reliability<br> flow control<br> congestion control<br> timing<br> any bandwidth guarantee</p></blockquote></li></ul></li></ul>',9),n=[l];function a(s,c,p,d,u,g){return t(),o("div",null,n)}const b=e(r,[["render",a]]);export{m as __pageData,b as default};
