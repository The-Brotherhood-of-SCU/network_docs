import{_ as e,c as t,o as i,a2 as l}from"./chunks/framework.B8ScJZFy.js";const x=JSON.parse('{"title":"Multiplexing/Demultiplexing","description":"","frontmatter":{},"headers":[],"relativePath":"Transport Layer/Multiplexing and demultiplexing.md","filePath":"Transport Layer/Multiplexing and demultiplexing.md","lastUpdated":1718164289000}'),a={name:"Transport Layer/Multiplexing and demultiplexing.md"},n=l('<h1 id="multiplexing-demultiplexing" tabindex="-1">Multiplexing/Demultiplexing <a class="header-anchor" href="#multiplexing-demultiplexing" aria-label="Permalink to &quot;Multiplexing/Demultiplexing&quot;">​</a></h1><h2 id="core" tabindex="-1">Core <a class="header-anchor" href="#core" aria-label="Permalink to &quot;Core&quot;">​</a></h2><p><strong>Port Number</strong></p><h2 id="segment-数据段" tabindex="-1"><strong>segment</strong>(数据段) <a class="header-anchor" href="#segment-数据段" aria-label="Permalink to &quot;**segment**(数据段)&quot;">​</a></h2><blockquote><p>unit of data exchanged between transport layer entities</p></blockquote><ul><li>TPDU: transport protocol data unit</li></ul><p><strong>segment</strong></p><ul><li>segment header</li><li>application-layer data</li></ul><h2 id="multiplexing-多路复用" tabindex="-1">Multiplexing(多路复用) <a class="header-anchor" href="#multiplexing-多路复用" aria-label="Permalink to &quot;Multiplexing(多路复用)&quot;">​</a></h2><blockquote><p>gathering data from multiple application processes, enveloping data with header(later used for demultiplexing)</p></blockquote><h2 id="demultiplexing-多路分解" tabindex="-1">Demultiplexing(多路分解) <a class="header-anchor" href="#demultiplexing-多路分解" aria-label="Permalink to &quot;Demultiplexing(多路分解)&quot;">​</a></h2><blockquote><p>delivering received segments to correct application layer processes</p></blockquote><h2 id="multiplexing-demultiplexing-1" tabindex="-1">multiplexing/demultiplexing <a class="header-anchor" href="#multiplexing-demultiplexing-1" aria-label="Permalink to &quot;multiplexing/demultiplexing&quot;">​</a></h2><ul><li><p>based on sender, receiver port numbers, IP addresses</p><ul><li>source, destination port in each segment</li><li><em>well-known port numbers for specific applications</em></li></ul></li><li><p>TCP/UDP segment format</p><ul><li><strong>source port</strong>(2 bytes)</li><li><strong>destination port</strong>(2 bytes)</li><li>other header fields</li><li>application data(message)</li></ul></li></ul>',14),r=[n];function o(p,s,u,d,g,m){return i(),t("div",null,r)}const h=e(a,[["render",o]]);export{x as __pageData,h as default};
